// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_auth_app/test/core/app_route_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter/material.dart' as _i6;
import 'package:flutter_auth_app/features/features.dart' as _i2;
import 'package:flutter_auth_app/utils/utils.dart' as _i5;
import 'package:flutter_bloc/flutter_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLogoutState_1 extends _i1.SmartFake implements _i2.LogoutState {
  _FakeLogoutState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneralTokenState_2 extends _i1.SmartFake
    implements _i2.GeneralTokenState {
  _FakeGeneralTokenState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReloadFormState_3 extends _i1.SmartFake
    implements _i2.ReloadFormState {
  _FakeReloadFormState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterState_4 extends _i1.SmartFake implements _i2.RegisterState {
  _FakeRegisterState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMainState_5 extends _i1.SmartFake implements _i2.MainState {
  _FakeMainState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsersState_6 extends _i1.SmartFake implements _i2.UsersState {
  _FakeUsersState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthCubit extends _i1.Mock implements _i2.AuthCubit {
  MockAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AuthState);

  @override
  _i3.Stream<_i2.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.AuthState>.empty(),
      ) as _i3.Stream<_i2.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> login(_i2.LoginParams? params) => (super.noSuchMethod(
        Invocation.method(
          #login,
          [params],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [LogoutCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogoutCubit extends _i1.Mock implements _i2.LogoutCubit {
  MockLogoutCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LogoutState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLogoutState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.LogoutState);

  @override
  _i3.Stream<_i2.LogoutState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.LogoutState>.empty(),
      ) as _i3.Stream<_i2.LogoutState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> postLogout() => (super.noSuchMethod(
        Invocation.method(
          #postLogout,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.LogoutState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.LogoutState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [GeneralTokenCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeneralTokenCubit extends _i1.Mock implements _i2.GeneralTokenCubit {
  MockGeneralTokenCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GeneralTokenState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeGeneralTokenState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.GeneralTokenState);

  @override
  _i3.Stream<_i2.GeneralTokenState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.GeneralTokenState>.empty(),
      ) as _i3.Stream<_i2.GeneralTokenState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> generalToken(_i2.GeneralTokenParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #generalToken,
          [params],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.GeneralTokenState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.GeneralTokenState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ReloadFormCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockReloadFormCubit extends _i1.Mock implements _i2.ReloadFormCubit {
  MockReloadFormCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ReloadFormState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeReloadFormState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ReloadFormState);

  @override
  _i3.Stream<_i2.ReloadFormState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.ReloadFormState>.empty(),
      ) as _i3.Stream<_i2.ReloadFormState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void reload() => super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.ReloadFormState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.ReloadFormState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [RegisterCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterCubit extends _i1.Mock implements _i2.RegisterCubit {
  MockRegisterCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RegisterState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRegisterState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RegisterState);

  @override
  _i3.Stream<_i2.RegisterState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.RegisterState>.empty(),
      ) as _i3.Stream<_i2.RegisterState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> register(_i2.RegisterParams? params) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [params],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.RegisterState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.RegisterState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [MainCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMainCubit extends _i1.Mock implements _i2.MainCubit {
  MockMainCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set dataMenus(List<_i5.DataHelper>? _dataMenus) => super.noSuchMethod(
        Invocation.setter(
          #dataMenus,
          _dataMenus,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.MainState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMainState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.MainState);

  @override
  _i3.Stream<_i2.MainState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.MainState>.empty(),
      ) as _i3.Stream<_i2.MainState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void updateIndex(
    int? index, {
    _i6.BuildContext? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #updateIndex,
          [index],
          {#context: context},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initMenu(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #initMenu,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool onBackPressed(
    _i6.BuildContext? context,
    _i6.GlobalKey<_i6.ScaffoldState>? scaffoldState, {
    bool? isDrawerClosed = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onBackPressed,
          [
            context,
            scaffoldState,
          ],
          {#isDrawerClosed: isDrawerClosed},
        ),
        returnValue: false,
      ) as bool);

  @override
  void emit(_i2.MainState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.MainState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UsersCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersCubit extends _i1.Mock implements _i2.UsersCubit {
  MockUsersCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
      ) as int);

  @override
  set currentPage(int? _currentPage) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          _currentPage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get lastPage => (super.noSuchMethod(
        Invocation.getter(#lastPage),
        returnValue: 0,
      ) as int);

  @override
  set lastPage(int? _lastPage) => super.noSuchMethod(
        Invocation.setter(
          #lastPage,
          _lastPage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.User> get users => (super.noSuchMethod(
        Invocation.getter(#users),
        returnValue: <_i2.User>[],
      ) as List<_i2.User>);

  @override
  _i2.UsersState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUsersState_6(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.UsersState);

  @override
  _i3.Stream<_i2.UsersState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.UsersState>.empty(),
      ) as _i3.Stream<_i2.UsersState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> nextPage() => (super.noSuchMethod(
        Invocation.method(
          #nextPage,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> fetchUsers(_i2.UsersParams? usersParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUsers,
          [usersParams],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.UsersState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i4.Change<_i2.UsersState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
